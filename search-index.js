var searchIndex = JSON.parse('{\
"blind_bid":{"doc":"BlindBid impl","i":[[0,"bid","blind_bid","Bid data structure",null,null],[3,"StorageBid","blind_bid::bid","",null,null],[3,"Bid","","",null,null],[11,"init","","",0,[[],[["result",4],["error",3]]]],[11,"prove_score_generation","","",0,[[["standardcomposer",3]],[["result",4],["proof",3],["error",3]]]],[0,"proof","blind_bid","BlindBidProof module.",null,null],[5,"blind_bid_proof","blind_bid::proof","Generates the proof of BlindBid",null,[[["bid",3],["poseidonbranch",3],["standardcomposer",3]],[["result",4],["error",3]]]],[0,"score_gen","blind_bid","",null,null],[0,"score","blind_bid::score_gen","Score generation",null,null],[3,"Score","blind_bid::score_gen::score","",null,null],[5,"prove_correct_score_gadget","","Proves that a `Score` is correctly generated. Prints theâ€¦",null,[[["bid",3],["standardcomposer",3]],[["result",4],["error",3]]]],[17,"V_MIN","blind_bid","The minimum amount user is permitted to bid",null,null],[17,"V_MAX","","The maximum amount user is permitted to bid",null,null],[11,"from","blind_bid::bid","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","blind_bid::score_gen::score","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","blind_bid::bid","",1,[[["bid",3]],["storagebid",3]]],[11,"into","","",1,[[],["storagescalar",3]]],[11,"clone","","",1,[[],["storagebid",3]]],[11,"clone","","",0,[[],["bid",3]]],[11,"clone","blind_bid::score_gen::score","",2,[[],["score",3]]],[11,"default","blind_bid::bid","",1,[[],["storagebid",3]]],[11,"default","","",0,[[],["bid",3]]],[11,"default","blind_bid::score_gen::score","",2,[[],["score",3]]],[11,"eq","","",2,[[["score",3]]]],[11,"ne","","",2,[[["score",3]]]],[11,"fmt","blind_bid::bid","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","blind_bid::score_gen::score","",2,[[["formatter",3]],["result",6]]]],"p":[[3,"Bid"],[3,"StorageBid"],[3,"Score"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);